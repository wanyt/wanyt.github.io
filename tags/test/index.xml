<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on Terminal</title>
    <link>/tags/test/</link>
    <description>Recent content in test on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2020 18:07:23 +0800</lastBuildDate>
    
	<atom:link href="/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>文章测试</title>
      <link>/posts/test/</link>
      <pubDate>Wed, 02 Sep 2020 18:07:23 +0800</pubDate>
      
      <guid>/posts/test/</guid>
      <description>kotlin的扩展方法被解析成静态方法，那为什么在扩展方法中可以直接调用类的成员方法和成员变量呢？这不是很奇怪吗？kotlin使用了什么样的魔法可以让静态方法调用累的成员方法。
编写ExtA.kt，然后添加成员方法testA()和扩展方法testB()：
class ExtA { fun testA(){ print(“abcd”) } } fun ExtA.testB(){ testA() } 在扩展方法testB()中调用了成员方法testA()，编译没报错，并且能运行成功。kotlin肯定使用什么语法糖能在静态方法中调用成员方法。现在看一下testB()编译后的java代码：
public static final void testB(@NotNull ExtA $this$testB) { Intrinsics.checkParameterIsNotNull($this$testB, &amp;quot;$this$testB&amp;quot;); $this$testB.testA(); } testB()确实被编译成静态方法了，但是无参的testB()变成了含参的testB(ExtA)，而testB()中调用testA()使用了参数的应用调用的。谜团差不多有解了，是因为成员引用被传递到扩展方法中，扩展方法调用了引用的成员方法。
再创建ExtB.kt，在ExtB.kt中调用扩展方法testB()：
class ExtB { fun main(){ val a = ExtA() a.testB() } } ExtB.kt编译后的java代码：
public final class ExtB { public final void main() { ExtA a = new ExtA(); ExtsKt.testB(a); } } 这样看就很清晰了，kotlin的扩展方法就是语法糖，本质还是静态方法而已；但不得不说它就是很甜。</description>
    </item>
    
  </channel>
</rss>